---
title: '\pkg{discourseGT}: An \proglang{R} package to analyze discourse networks in educational contexts'
output: 
  pdf_document:
    keep_tex: true
    number_sections: true
    latex_engine: xelatex
    citation_package: natbib
fontsize: 12pt
vignette: >
  %\VignetteIndexEntry{discourseGT: An R package to analyze discourse networks in educational contexts}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
header-includes:
- |
  ```{=latex}
  \usepackage{hyperref}
  \newcommand{\pkg}[1]{{\fontseries{m}\fontseries{b}\selectfont #1}}
  %%\let\code=\texttt
  \let\proglang=\textsf
  \usepackage{floatrow}
  \floatsetup[table]{capposition=top}
  \floatsetup[figure]{capposition=top}
  \usepackage{longtable}
  \usepackage{booktabs}
  \usepackage{tabulary}
  \usepackage{ragged2e}
  ```
bibliography: references.bib
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE
  )
```

# discourseGT Workflow {#workflow}
## General Workflow
The functions of \pkg{discourseGT} were designed to be as modular as possible, making it possible to only run analyses of interest. Figure \ref{fig:workflow} represents the general workflow of \pkg{discourseGT}, and Table \ref{table:dgt_func} describes explicit function names organized by their general uses.

\begin{figure}[H]
\caption{General workflow of \pkg{discourseGT}. The raw data can either be converted to an \pkg{igraph} object for further analysis or directly passed for NGT analysis. All console output can be permanently stored to the user's local disk. Green represents the start of the workflow. Purple represents steps necessary to generate an \pkg{igraph} object. Blue represents the potential downstream uses of an \pkg{igraph} object. Orange represents NGT analysis. Red signals the end of the workflow.}
\label{fig:workflow}
\centering
\includegraphics[width=\textwidth]{maintext_files/figure-latex/workflow.png}
\end{figure}


\begin{longtable}[H]{@{}p{0.07\textwidth}p{0.27\textwidth}p{0.28\textwidth}p{0.28\textwidth}}
\caption{List of all \pkg{discourseGT} functions}    %%%%<===
\label{table:dgt_func}\\
\toprule
\textbf{Phase} & \textbf{Function Name} & \textbf{Parameter(s)} & \textbf{Description} \\ \midrule
\endfirsthead
\hline
\textbf{Phase} & \textbf{Function Name} & \textbf{Parameter(s)} & \textbf{Description} \\ \midrule
\endhead
Purple\newline        &       \texttt{tabulate\_edges()}\newline        &       \texttt{input} – \texttt{data.frame} or \texttt{string}. Points to \texttt{.csv} file with talk-turn data in the question-and-response format.\newline\newline\texttt{silentNodes} – \texttt{integer}. The number of nodes that do not interact with others.\newline       &        Calculates the weighted edge list from the input data and number of silent nodes not captured in the data.\newline \\

Purple\newline        &       \texttt{prepareGraphs()}\newline         &       \texttt{raw\_data\_input} – \texttt{list}. Output of \texttt{tabulate\_edges()}.\newline\newline\texttt{project\_title} – \texttt{string}. Sets the title of the project.\newline\newline\texttt{weightedGraph} - \texttt{boolean}. \texttt{TRUE} if downstream analysis should account for weighted edges. Else \texttt{FALSE}.\newline        &       Prepares the \pkg{igraph} object from the weighted edge list. This is utilized by several downstream analytical functions.\newline \\

Blue\newline          &       \texttt{coreNetAnalysis()}\newline       &       \texttt{ginp} – \texttt{list}. Output of \texttt{prepareGraphs()}.\newline      &       Analyzes the input \pkg{igraph} object and returns basic network statistics, as reasoned in Chai et al. 2019.\newline \\

Blue\newline          &       \texttt{subgroupsNetAnalysis()}\newline  &       \texttt{ginp} – \texttt{list}. Output of \texttt{prepareGraphs()}.\newline\newline\texttt{raw\_input} – \texttt{data.frame}. Points to the original talk-turn data in the question-and-response format.\newline\newline\texttt{normalized} – \texttt{boolean}. Whether or not to normalize the betweenness centrality values relative to the graph.\newline        &       Analyzes the input \pkg{igraph} object for potential subgroups.\newline \\

Blue\newline          &       \texttt{summaryNet()}\newline            &       \texttt{netintconfigData} – \texttt{list}. Output of \texttt{prepareGraphs()}.\newline\newline\texttt{coreNetAnalysisData} – \texttt{list}. Output of \texttt{coreNetAnalysis()}.\newline\newline\texttt{subgroupsNetAnalysisData} – \texttt{list}. Output of \texttt{subgroupsNetanalysis()}.\newline\newline\texttt{display} – \texttt{boolean}. Whether or not to print output to console.\newline        &        Summarizes the analytical output from several other functions into a single output.\newline \\

Blue\newline          &       \texttt{basicPlot()}\newline             &       \texttt{ginp} – \texttt{list}. Output of \texttt{prepareGraphs()}.\newline\newline\texttt{graph\_selection\_input} – \texttt{integer}. Numerical value from 0 to 2, inclusive, which selects the graphing algorithm used. 0 = Fruchterman Reingold, 1 = Kamada Kawai, and 2 = Reingold Tilford.\newline\newline\texttt{curvedEdgeLines} – \texttt{boolean}. Whether or not to curve graph edges.\newline\newline\texttt{arrowSizeMultiplier} – \texttt{numeric}. Scales arrow sizes based on input factor.\newline\newline\texttt{logscale} – \texttt{boolean}. If \texttt{TRUE}, scale graph edges logarithmically. Else do not.\newline\newline\texttt{logBase} – \texttt{integer}. Logarithmic base to scale graph edges.\newline       &       Plots a basic network graph utilizing the default \proglang{R} visualization backend.\newline \\

Blue\newline          &       \texttt{plot1Att()}\newline              &       \texttt{data} – \texttt{list}. Output of \texttt{prepareGraphs()}.\newline\newline\texttt{prop} – \texttt{integer}. Rescales the graph edge sizes.\newline\newline\texttt{graphmode} – \texttt{string}. Specifies the graphing algorithm used. Refer to \texttt{gplot.layout} for more options.\newline\newline\texttt{attribute} – \texttt{list}. Mapping to the attribute information.\newline\newline\texttt{attribute.label} – \texttt{string}. Name of attribute to display in the graph.\newline\newline\texttt{attribute.node.labels} – \texttt{list}. Mapping to the node labels.\newline\newline\texttt{attribute.nodesize} – \texttt{integer} or \texttt{list}. Mapping to universal or individualized node sizes, respectively.\newline       &       Plots a network graph with a single input attribute. Utilizes the \pkg{ggplot2} [@R-ggplot2] backend.\newline \\

Blue\newline          &       \texttt{plot2Att()}\newline              &       \texttt{data} – \texttt{list}. Output of \texttt{prepareGraphs()}.\newline\newline\texttt{prop} – \texttt{integer}. Rescales the graph edge sizes.\newline\newline\texttt{graphmode} – \texttt{string}. Specifies the graphing algorithm used. Refer to \texttt{gplot.layout} for more options.\newline\newline\texttt{attribute1} – \texttt{list}. Mapping to the first attribute information.\newline\newline\texttt{attribute2} – \texttt{list}. Mapping to the second attribute information.\newline\newline\texttt{attribute1.label} – \texttt{string}. Name of the first attribute to display in the graph.\newline\newline\texttt{attribute2.label} – \texttt{string}. Name of the second attribute to display in the graph.\newline\newline\texttt{attribute.node.labels} – \texttt{list}. Mapping to the node labels.\newline\newline\texttt{attribute.nodesize} – \texttt{integer} or \texttt{list}. Mapping to universal or individualized node sizes, respectively.\newline       &       Plots a network graph with two input attributes. Utilizes the \pkg{ggplot2} [@R-ggplot2] backend.\newline \\

Orange\newline        &       \texttt{plotNGTData()}\newline           &       \texttt{data} – \texttt{data.frame} or \texttt{string}. Points to \texttt{.csv} file with talk-turn data in the question-and-response format.\newline\newline\texttt{convoMinutes} – \texttt{integer}. Length of conversation, in minutes.\newline\newline\texttt{silentNode} – \texttt{integer}. The number of nodes that do not interact with others.\newline        &       Analyzes non-graph theory statistics and visualizes them in three plots. These are elaborated on in Chai et al. 2019.\newline \\

Red\newline           &       \texttt{writeData()}\newline             &       \texttt{project\_name} – \texttt{string}. Sets the title of the project.\newline\newline\texttt{objectfile} – \texttt{list}. The object to be exported to disk.\newline\newline\texttt{dirpath} – \texttt{string}. The location on disk where the exported file will be written.\newline       &       Writes any data object file as an appropriate format to a specified user directory. Images are saved with a resolution of 300dpi.\newline \\ \bottomrule
\end{longtable}



## Data Structure
Collecting and formatting data for analysis by \pkg{discourseGT} is based on episodes and talk-turns [@Chai_2019]. Talk-turn data should be recorded as participants speak sequentially, which can be done with life observations in real time [@Chai_2019] or analysis of video or audio transcripts [@Liyanage_2021]. Be prepared to record the duration of the discussion (in minutes), which is required to determine the number of episode starts and episode continuations per unit of time. Talk-turn data are collected in a two-column table that tracks episode starts (`ep_start`) and episode continuations (`ep_cont`) and with each participant in the group assigned a unique identifier, such as a number (Table \ref{table:example}). Each row should only have a single participant's identifier entered once either in the `ep_start` or `ep_cont` column. An entry in the `ep_start` column denotes the beginning of a new episode. The boundaries of an episode are defined by the researcher and the research question, although these definitions should be set consistently within a study. It is vital that the column names in the data are explicitly labeled as `ep_start` and `ep_cont`, respectively. Raw data may be prepared using most spreadsheet software or text editors, but it should ultimately be saved as a comma-separated file (`.csv`).


\begin{table}[H]
\setlength{\tymin}{70pt}
\let\raggedright\RaggedRight
\begin{tabulary}{\textwidth}{@{}LLLL@{}}
\toprule
\textbf{ep\_start}      &        \textbf{ep\_cont}      \\ \midrule
1 & NA \\
NA & 3 \\
NA & 2 \\
4 & NA \\
NA & 2 \\ \bottomrule
\end{tabulary}
\caption{Formatted talk-turn data ready for \pkg{discourseGT} analysis. In this example, an episode is defined arbitrarily as a topic (not shown) --- that is, each episode is a relevant discussion on a single topic. There are two episodes. The first episode is three talk-turns long, with Participant 1 initiating the episode. Participant 3 then spoke, followed by Participant 2. The second episode has two talk-turns, with Participant 4 starting a new episode and Participant 2 speaking next to complete the overall discussion. It is important to note that the duration of the conversation (in minutes) is not a part of the table. Rather, it should be recorded elsewhere for use in NGT analysis.}
\label{table:example}
\end{table}


# Worked Case Example
The \pkg{discourseGT} software package comes equipped with example data. Here, we will utilize these data to demonstrate its utility in examining discourse networks.

To get started, install the software package through the Comprehensive \proglang{R} Archive Network (CRAN). Load it using:

```{r loadpkg, tidy=TRUE,tidy.opts=list(width.cutoff=60)}
library(discourseGT)
```

## Importing Data
Raw data can be imported using the `read.csv()` function. For the sake of utilizing the example data, however, it is useful to duplicate it by assigning its values to a new variable. Once it has been duplicated, view the head of the data to ensure that it has been properly imported:

```{r importdata, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
data <- sampleData1
head(data)
```

## Preparing the igraph Object
Prior to generating the \pkg{igraph} object, a weighted edge list needs to be generated from the imported raw data. By default, the weight of an edge is defined as the number of times an edge has occurred between two nodes. Weights can be redefined based on other available criteria, but this must be done manually.

```{r tabedges, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
# Calculate the weighted edge list
tabEdge <- tabulate_edges(data, silentNodes = 0)
# Check the weighted edge list
head(tabEdge$master)
```

Recall that an \pkg{igraph} object is the core input to many of the modular analytical functions offered in \pkg{discourseGT}. To generate an \pkg{igraph} object, the following information is required:

  *	The variable that stores the weighted edge list
  *	The title of the project. Default: `null`
  *	Is the graph weighted? Default: `TRUE`

```{r prepNet}
prepNet <- prepareGraphs(tabEdge, 
                         project_title = "Sample Data 1",
                         weightedGraph = TRUE)
```

The graph settings specified by this function will influence the analytical output of downstream functions.

## Running Graph Theory Analysis
\pkg{discourseGT} offers graph theory-based analytics via two separate functions. The first, \newline`coreNetAnalysis()`, will perform core operations that produce the parameters. It will count the number of nodes, and edges, calculate edge weights, average graph degree, modularity, centrality, and related graph theory parameters. To run the function and store it in a variable:

```{r coreNet, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
coreNet <- coreNetAnalysis(prepNet)
```

The second, `subgroupsNetAnalysis()`, utilizes the Girvan-Newman algorithm to detect subgroups within the overall network [@Girvan_2002], such that:

```{r subgroups, warnings = FALSE}
subNet <- subgroupsNetAnalysis(prepNet, raw_input = data,
                               normalized = TRUE)
```

## Generating Summaries
While it is possible to display the generated \pkg{igraph} object, core network statistics, and subgroup statistics as separate outputs, it can be helpful to view them as an overall summary of a network's graph theory analytics. Furthermore, combining all of these outputs into a single variable is a necessary step in exporting them as a single text file. The `summaryNet()` function will combine the outputs from `prepareGraphs()`, `coreNetAnalysis()`, and \newline`subgroupsNetAnalysis()` as such:

```{r summary}
summaryData <- summaryNet(netintconfigData = prepNet, 
                          coreNetAnalysisData = coreNet, 
                          subgroupsNetAnalysisData = subNet, 
                          display = TRUE)
```

## Basic Visualization
\pkg{discourseGT} offers several methods to visualize networks. For a basic network graph, \newline`basicPlot()` should be used, and its parameters should be modified to suit the needs of the user. These options include modifications to the plotting algorithm, edge curvature, arrow size, and edge weight scaling.

Its default plotting algorithm is Fruchterman Reingold, denoted by `0` [@Fruch-1991]. This is typically the best option to use because it attempts to minimize edge intersections in the final plot, improving readabiliy. Other projections include Kamada Kawai [@Kawai_1989] and Reingold Tilford [@Tilford_1981], denoted by `1` and `2`, respectively.

Edge curvature defaults to `TRUE` so that differences in talk-turn taking between nodes can be distinguished. Consider two participants, represented as Node A and Node B. It is entirely possible for Node A to talk after Node B more than Node B talks after Node A. Consequently, the two edges that point in each direction will have different weights, and these can only be visually seen if they are curved instead of overlapping. On the other hand, graphs without curved edges may improve clarity. This can be especially favorable when plotting an unweighted graph.

To modify arrow sizes, a multiplier can be passed to `arrowSizeMultiplier`. The default value is `1`. Any values <1.0 will shrink the arrow, and vice versa. Again, this feature is added to improve readability in specific cases.

Lastly, edge weight scaling is best used for improved visualization of larger, weighted datasets. Due to the increase in raw edges, default plotting may yield unreadable results. We implemented Equation \ref{eq:7} to do so according to a linear scale. This method allows for users to visually compare talk-turn frequencies within a graph, which is not as intuitive with other forms of scaling.

\begin{equation}\label{eq:7}
\text{y} = \frac{\texttt{(scaledMax} - \texttt{scaledMin)}\cdot \text{(eachEdgeWeight} - \text{rawMin)}}{\text{rawMax} - \text{rawMin}} + \texttt{scaledMin}
\end{equation}

Here, each edge weight is individually scaled to a new value $y$. `scaledMax` and `scaledMin` are the user-defined boundaries of a new scale for all weighted edges. $rawMin$ and $rawMax$ are the minimum and maximum edge weights that are extracted from the raw data via the `prepareGraphs()` function. $eachEdgeWeight$ refers to the weight of each unique edge.

For users, `scaledMax` must be greater than or equal to `scaledMin`. These variables may also be set to equal, non-zero values to produce an unweighted version of the graph.

Note that while both `scaledMin` and `scaledMax` can theoretically be set to `0`, we advise against this because the resulting graph will appear to have no edges. Likewise, if `scaledMin` is set to `0` while `scaledMax` is a non-zero value, the resulting graph will appear to have no edges where the most infrequent talk-turns occurred. This may have some functionality depending on the user's use-case.

Below is an example of a graph that uses the Fruchterman Reingold projection, linearly scales the dataset to new weighted edge boundaries of `[1, 10]`, and applies a scale of 2 to the arrow sizes.

```{r baseplot, dpi = 300, fig.height = 7, fig.width = 7, warning = FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
basicPlot(prepNet, graph_selection_input = 0, curvedEdgeLines = TRUE,
          arrowSizeMultiplier = 2, scaledEdgeLines = TRUE,
          scaledMin = 1, scaledMax = 10)
```

In this plot, it can be easily seen that the fewest number of talk-turns relative to the entire discourse network occurred between Nodes 2 and 3 as well as Nodes 2 and 4. Nodes 1 and 2 shared the next fewest number of talk-turns, followed by Nodes 1 and 3 and Nodes 3 and 4. Nodes 1 and 4 shared the greatest number of talk-turns between them. In each of these node pairs, the conversation appeared to travel equally between the nodes involved, as the edges of similar thickness indicate. Note that we cannot view any attribute data about the nodes here.

## Attribute Visualization
To add attributes to a network graph, the `plot1Att()` and `plot2Att()` functions can be used. These functions utilize the `ggplot2` backend with `GGally` [@R-ggplot2, @R-GGally], giving them an appearance distinct from the previously discussed `basicPlot()` function.

Before starting, ensure that a properly formatted `data.frame` with attributes is in the working environment. Displayed below is an example attribute dataset included with \pkg{discourseGT}:

```{r importAtt, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
attData <- attributeData
head(attData)
```

Note that the first column, `node`, contains each node name that was included in the initial imported data. This is a crucial aspect to the attribute data because it identifies attributes associated with particular nodes for `plot1Att()` and/or `plot2Att()`.

Similarly to the `basicPlot()` function, the attribute plotting functions include options to modify the overall projection, albeit less granular. These include edge scaling, node sizes, and plotting algorithm.

Edge weight scaling can be modified by changing the value of `prop`, and node sizes can be modified by changing the value of `attribute.nodesize`. Each of these have a default value of `20`, although this is arbitrary. The user should find the best settings that suit their use case.

The default plotting algorithm is again Fruchterman Reingold for its readability [@Fruch-1991]. Here, however, this option is indicated by passing `fruchtermanreingold` into the function. Other projections can be found with `gplot.layout`.

Lastly, it is important to note that only 1 or 2 attributes can be plotted at once. These cases should utilize the `plot1Att()` and `plot2Att()` functions, respectively.

Below is an example of an attribute graph with larger-than-default edge sizes and smaller-than-default node sizes. It utilizes the Fruchterman Reingold projection.

```{r plotNet1Attribute, dpi = 300, fig.height=8, fig.width=8, warning = FALSE}
plot1Att(prepNet, 
         prop = 40, 
         graphmode = "fruchtermanreingold", 
         attribute = attData$ethnicity, 
         attribute.label = "Ethnicity",
         attribute.node.labels = attData$node, 
         attribute.nodesize = 16)
```

To plot a second attribute to a network, utilize `plot2Att()` with the aforementioned notation. The following graph showcases the network with both ethnic and gender data:

```{r plotNet2Attributes, dpi = 300, fig.height=8, fig.width=8, warning = FALSE}
plot2Att(prepNet, 
         prop = 40, 
         graphmode = "fruchtermanreingold",
         attribute1 = attData$ethnicity, 
         attribute2 = attData$gender,
         attribute1.label = "Ethnicity",
         attribute2.label = "Gender",
         attribute.node.labels = attData$node,
         attribute.nodesize = 16)
```

## Customizable Visualization
Further graph customizability, such as node placements, can be achieved with \pkg{Cytoscape}, an open-source network plotting software [@Cytoscape]. In order to utilize this method:

1. Download & install \pkg{Cytoscape}.
2. Install `RCy3` [@R-rcy3] using the `BiocManager` package [@R-biocmanager].
3. Plot the \pkg{igraph} object and modify it in \pkg{Cytoscape}.

Assuming that \pkg{Cytoscape} is installed, install and load `RCy3` to properly link it to \proglang{R}. This can be done by:

```{r installRCy3, eval=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
install.packages("BiocManager")
BiocManager::install("RCy3")
library(RCy3)
```

To plot a graph, first ensure that a new \pkg{Cytoscape} session is loaded. Then, utilize the following command to send an \pkg{igraph} object to the GUI:

```{r sendToCytoscape, eval=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
createNetworkFromIgraph(prepNet$graph)
```

The graph will now appear in \pkg{Cytoscape}, where further modifications can be made.

\begin{figure}[H]
\centering
\includegraphics[width=0.8\textwidth]{maintext_files/figure-latex/cytoscape_updated.png}
\end{figure}

## Running Non-Graph Theory Analysis
Recall that \pkg{discourseGT} does not require an \pkg{igraph} object to produce NGT analysis. Rather, `plotNGTData()` utilizes the raw, two column data to generate its output. Additionally, it requires the duration of the conversation (in minutes) and the number of silent nodes (i.e. participants who did not speak at all) in the discourse network. The function outputs the previously-discussed NGT parameters and three individual graphs. The raw data are also exported alongside the graphs, giving the user greater flexibility in creating their own NGT visualizations.

```{r ngt_plots, dpi = 300, fig.height=6, fig.width=9, warning = FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60)}
options(width = 60)
plotNGTData(data = data, convoMinutes = 90,
            silentNodes = 0)
```

## Exporting to Disk
The `writeData()` function accepts specific \pkg{discourseGT} function output and exports it as a permanent file to a specified directory on the user's disk. It can save the generated summary object, any plots, and weighted edge lists. Images will automatically export as a `.tiff` at 300 DPI, and console output will be exported as a `.txt` file.

The following example exports the generated summary to disk:

```{r exportdata, eval=FALSE, warning = FALSE, results='hide'}
writeData("Sample Data 1", summaryData, dirpath = tempdir())
```


<!---DO NOT ENTER REFERENCES MANUALLY. UPDATE THE REFERENCES.BIB FILE. R WILL ADD THE REFERENCES AT THE END OF THIS DOCUMENT --->
